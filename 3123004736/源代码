import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;

/**
 * 主类，用于计算两个文本文件的字符频率余弦相似度
 */
public class Main {
    /**
     * 主方法，程序入口
     * @param args 命令行参数，包含三个元素：
     *             args[0] 原始文件路径
     *             args[1] 拷贝文件路径
     *             args[2] 结果输出文件路径
     */
    public static void main(String[] args) {
        // 参数校验：必须包含3个参数
        if (args.length != 3) {
            System.err.println("测试文件出错");
            System.exit(1);
        }

        try {
            // 统计原始文件和拷贝文件的字符频率
            Map<Character, Integer> orig = countChars(args[0]);
            Map<Character, Integer> copy = countChars(args[1]);

            // 计算余弦相似度并保留两位小数
            String similarity = String.format("%.2f", cosineSimilarity(orig, copy));

            // 将结果写入指定文件
            writeResult(args[2], similarity);
        } catch (IOException e) {
            System.err.println("File error: " + e.getMessage());
            System.exit(2);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            System.exit(3);
        }
    }

    /**
     * 统计文件字符频率
     * @param path 文件路径
     * @return 字符频率映射表（Key为字符，Value为出现次数）
     * @throws IOException 当文件读取失败时抛出
     */
    private static Map<Character, Integer> countChars(String path) throws IOException {
        Map<Character, Integer> freq = new HashMap<>();

        // 使用UTF-8字符集读取文件
        try (BufferedReader br = Files.newBufferedReader(Paths.get(path), StandardCharsets.UTF_8)) {
            boolean skipNext = false;  // 用于跳过\r后的\n
            int charCode;

            // 逐个字符读取文件内容
            while ((charCode = br.read()) != -1) {
                if (skipNext) {
                    skipNext = false;
                    continue;
                }

                char c = (char) charCode;

                // 统一换行符处理：将\r或\r\n统一转换为\n
                if (c == '\r') {
                    c = '\n';
                    // 检查下一个字符是否是\n（处理Windows换行符）
                    if (br.ready() && br.read() == '\n') {
                        skipNext = true;  // 跳过下一个字符
                    }
                }

                // 更新字符频率统计
                freq.put(c, freq.getOrDefault(c, 0) + 1);
            }
        }
        return freq;
    }

    /**
     * 计算余弦相似度
     * @param a 第一个字符频率向量
     * @param b 第二个字符频率向量
     * @return 余弦相似度值（范围0.0-1.0）
     */
    private static double cosineSimilarity(Map<Character, Integer> a, Map<Character, Integer> b) {
        // 合并两个向量的所有特征字符
        Set<Character> keys = new HashSet<>(a.keySet());
        keys.addAll(b.keySet());

        // 计算点积
        double dot = keys.stream()
                .mapToDouble(k -> a.getOrDefault(k, 0) * b.getOrDefault(k, 0))
                .sum();

        // 计算向量模长
        double magA = Math.sqrt(a.values().stream()
                .mapToDouble(v -> Math.pow(v, 2)).sum());
        double magB = Math.sqrt(b.values().stream()
                .mapToDouble(v -> Math.pow(v, 2)).sum());

        // 处理除零情况（当至少一个向量全零时返回0.0）
        return magA * magB == 0 ? 0.0 : dot / (magA * magB);
    }

    /**
     * 将结果写入指定文件
     * @param path 输出文件路径
     * @param content 要写入的内容
     * @throws IOException 当文件写入失败时抛出
     */
    private static void writeResult(String path, String content) throws IOException {
        Path output = Paths.get(path);
        // 确保父目录存在
        Files.createDirectories(output.getParent());

        // 写入内容到文件（UTF-8 编码）
        Files.writeString(
                output,
                content,
                StandardCharsets.UTF_8,
                StandardOpenOption.CREATE,        // 文件不存在时创建
                StandardOpenOption.TRUNCATE_EXISTING  // 文件存在时清空
        );
    }
}
