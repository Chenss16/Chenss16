 public static void main(String[] args) {
        // 参数校验：必须包含3个参数
        if (args.length != 3) {
            System.err.println("请正确提供三个文件路径");
            System.exit(1);
        }

        try {
            // 统计原始文件和拷贝文件的字符频率
            Map<Character, Integer> orig = countChars(args[0]);
            Map<Character, Integer> copy = countChars(args[1]);

            // 计算余弦相似度并保留两位小数
            String similarity = String.format("%.2f", cosineSimilarity(orig, copy));

            // 将结果写入指定文件
            writeResult(args[2], similarity);
        } catch (IOException e) {
            System.err.println("File error: " + e.getMessage());
            System.exit(2);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            System.exit(3);
        }
    }
/**
     * 统计文件字符频率
     * @param path 文件路径
     * @return 字符频率映射表（Key为字符，Value为出现次数）
     * @throws IOException 当文件读取失败时抛出
     */
    private static Map<Character, Integer> countChars(String path) throws IOException {
        Map<Character, Integer> freq = new HashMap<>();

        // 使用UTF-8字符集读取文件
        try (BufferedReader br = Files.newBufferedReader(Paths.get(path), StandardCharsets.UTF_8)) {
            boolean skipNext = false;  // 用于跳过\r后的\n
            int charCode;

            // 逐个字符读取文件内容
            while ((charCode = br.read()) != -1) {
                if (skipNext) {
                    skipNext = false;
                    continue;
                }

                char c = (char) charCode;

                // 统一换行符处理：将\r或\r\n统一转换为\n
                if (c == '\r') {
                    c = '\n';
                    // 检查下一个字符是否是\n（处理Windows换行符）
                    if (br.ready() && br.read() == '\n') {
                        skipNext = true;  // 跳过下一个字符
                    }
                }

                // 更新字符频率统计
                freq.put(c, freq.getOrDefault(c, 0) + 1);
            }
        }
        return freq;
    }
